import subprocess, os, tempfile, shutil
from web_frontend import settings
from lxml import etree
from string import Template
xmlns = '{http://www.copasi.org/static/schema}'

class CopasiModel:
    """Class representing a Copasi model"""
    def __init__(self, filename, binary=settings.COPASI_LOCAL_BINARY, binary_dir=settings.COPASI_BINARY_DIR):
        #Load the copasi binary
        self.model = etree.parse(filename)
        self.binary = binary
        self.binary_dir = binary_dir
        self.name = filename #TODO: change this to represent the actual model name, found in the xml
        
    def __unicode__(self):
        return self.name
    def __string__(self):
        return self.name
        
    def __copasiExecute(self, filename, tempdir):
        """Private function to run Copasi locally in a temporary folder."""
        p = subprocess.Popen([self.binary, '--nologo',  '--home', tempdir, filename], stdout=subprocess.PIPE, cwd=tempdir)
        p.communicate()
        
    def __getTask(self,task_type):
        """Get the XML tree representing a task with type: 'type'"""
        #Get the task list
        try:
            listOfTasks = self.model.find(xmlns + 'ListOfTasks')
            assert listOfTasks != None
        except:
            raise
        #Find the appropriate task
        try:
            for task in listOfTasks:
                if (task.attrib['type'] == task_type):
                    foundTask = task
                    break
            assert foundTask != None
        except:
            raise
        return foundTask
       
    def get_optimization_names(self, strip=False):
        """Returns a list of the parameter names to be included in the sensitvitiy optimization task"""
        #Create new custom report for sensitivities task, containing results in footer
        try:
            report_key = 'auto_report'
            listOfReports = self.model.find(xmlns + 'ListOfReports')
            newReport = etree.SubElement(listOfReports, xmlns + 'Report')
            newReport.set('key', report_key)
            newReport.set('name', report_key)
            newReport.set('taskType', 'sensitivities')
            newReport.set('seperator', '&#x09;')
            newReport.set('precision', '6')
            
            newReport_Comment = etree.SubElement(newReport, xmlns + 'Comment')
            newReport_Comment_body = etree.SubElement(newReport_Comment, xmlns + 'body')
            newReport_Comment_body.set('xmlns', 'http://www.w3.org/1999/xhtml')
            newReport_Comment_body.text = 'Report automatically generated by condor-copasi'

            newReport_Footer = etree.SubElement(newReport, xmlns + 'Footer')

            newReport_Footer_Object = etree.SubElement(newReport_Footer, xmlns + 'Object')
            newReport_Footer_Object.set('cn','CN=Root,Vector=TaskList[Sensitivities],Object=Result')  
        except:
            raise
        
        #Next, get the task list and set the optimization task to non-executable if needs be
        optTask = self.__getTask('optimization')

        #Set the optimization task as scheduled to not run
        try:
            optTask.attrib['scheduled'] = 'false'
        except:
            raise 
        
        
        #Now, find the sensitivites task, set the appropriate settings (Evaluation/Concentration fluxes of reactions/All variables/executable)
        sensTask = self.__getTask('sensitivities')
        
        #Set scheduled to run
        try:
            sensTask.attrib['scheduled'] = 'true'
        except:
            raise
         
        #Set the report
        try:
            report = sensTask.find(xmlns + 'Report')
            
            #If no report has yet been set, report == None. Therefore, create new report
            if report == None:
                report = etree.Element(xmlns + 'Report')
                optTask.insert(0,report)
            
            report.set('reference', report_key)
            report.set('append', '1')
            report.set('target', 'auto_output.txt')
            
        except:
            print 'Error finding report'
            raise
        
        #Set the appropriate subtask
        try:
            problem = sensTask.find(xmlns + 'Problem')
        except:
            raise
            
        try:
            for parameter in problem:
                if parameter.get('name') == 'SubtaskType':
                    parameter.set('value', '0')
                
                if parameter.get('name') == 'TargetFunctions':
                    for subParameter in parameter:
                        if subParameter.get('name') == 'SingleObject':
                            subParameter.set('value', '')
                        if subParameter.get('name') == 'ObjectListType':
                            subParameter.set('value', '21')
                if parameter.get('name') == 'ListOfVariables':
                    #Clear the list of variables
                    parameter.clear()
                    parameter.set('name', 'ListOfVariables')
                    variables = etree.SubElement(parameter, xmlns + 'ParameterGroup')
                    variables.set('name', 'Variables')
                    
                    #Add two new children to variables:
                    #<Parameter name='SingleObject')
                    singleObject = etree.SubElement(variables, xmlns + 'Parameter')
                    singleObject.set('name', 'SingleObject')
                    singleObject.set('type', 'cn')
                    singleObject.set('value', '')
                    
                    #<Parameter name='ObjectListType'>
                    objectListType = etree.SubElement(variables, xmlns + 'Parameter')
                    objectListType.set('name', 'ObjectListType')
                    objectListType.set('type', 'unsignedInteger')
                    objectListType.set('value', '41')
                    
        except:
            raise
        
        try:
            #Save the new copasi xml file in a new location:
            temp_dir = tempfile.mkdtemp()
            copasiTempFile = os.path.join(temp_dir, 'auto_copasi.cps')
            self.model.write(copasiTempFile)
            
            #And run CopasiSE on the new file
            binary = self.binary
            self.__copasiExecute(copasiTempFile, temp_dir)
            
            #Delete the temp copasi file
            os.remove(copasiTempFile)
        except:
            raise
        
        #Read through the sensitivity output file, and extract line 7:
        try:
            file = open(os.path.join(temp_dir, 'auto_output.txt'))
            iterator = 1
            for f in file.readlines():
                nameLine = f.rstrip('\n') #extract the 7th line
                if iterator == 7:
                    break
                iterator += 1
            file.close()
        except:
            raise
        
        #Seperate each name from the line containing the names
        names = nameLine.split('\t')
        #And remove the first element, which is an empty string
        names.pop(0)
        
        #Finally, if strip==True, name is of the format Values[name].InitialValue. Extract the name:
        if strip:
            for nameIndex in range(len(names)):
                try:
                    start = names[nameIndex].index('[') + 1
                    end = names[nameIndex].rindex(']')            
                    names[nameIndex] = str(names[nameIndex][start:end])
                except:
                    pass
            
        #Remove the temp folder and it's contents
        shutil.rmtree(temp_dir)
        
        return names
