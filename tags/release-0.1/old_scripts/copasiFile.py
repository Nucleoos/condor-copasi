#Module containing various functions for manipulating Copasi XML files

from lxml import etree
import subprocess
import os
from string import Template
import time
import sys

#Get the optimization task
def getOptimizationTask(doc,xmlns):
    #Get the task list
    try:
        listOfTasks = doc.find(xmlns + 'ListOfTasks')
        assert listOfTasks != None
    except:
        print 'Error finding task list'
        print 'Ensure that input file is valid Copasi XML'
        raise

    #Find the optimization task
    try:
        for task in listOfTasks:
            if (task.attrib['type'] == 'optimization'):
                optTask = task
                break
        
        assert optTask != None
    except:
        print 'Optimization task not found...'
        raise
        
    return optTask
    
    
#Get the optimization task
def getSensitivitiesTask(doc,xmlns):
    #Get the task list
    try:
        listOfTasks = doc.find(xmlns + 'ListOfTasks')
        assert listOfTasks != None
    except:
        print 'Error finding task list'
        print 'Ensure that input file is valid Copasi XML'
        raise

    #Find the sensitivities task
    try:
        for task in listOfTasks:
            if (task.attrib['type'] == 'sensitivities'):
                sensTask = task
                break
        
        assert sensTask != None
    except:
        print 'Optimization task not found...'
        raise
        
    return sensTask
    
    
#Create a new report for optimization output    
def createReport(doc,xmlns,report_key):
    listOfReports = doc.find(xmlns + 'ListOfReports')
    newReport = etree.SubElement(listOfReports, xmlns + 'Report')
    newReport.set('key', report_key)
    newReport.set('name', report_key)
    newReport.set('taskType', 'optimization')
    newReport.set('seperator', '&#x09;')
    newReport.set('precision', '6')
    
    newReport_Comment = etree.SubElement(newReport, xmlns + 'Comment')
    newReport_Comment_body = etree.SubElement(newReport_Comment, xmlns + 'body')
    newReport_Comment_body.set('xmlns', 'http://www.w3.org/1999/xhtml')
    newReport_Comment_body.text = 'Report automatically generated by condor-copasi'

    newReport_Body = etree.SubElement(newReport, xmlns + 'Body')

    newReport_Body_Object1 = etree.SubElement(newReport_Body, xmlns + 'Object')
    newReport_Body_Object1.set('cn','String=#----\n')

    newReport_Body_Object2 = etree.SubElement(newReport_Body, xmlns + 'Object')
    newReport_Body_Object2.set('cn','String=Evals \= ')

    newReport_Body_Object3 = etree.SubElement(newReport_Body, xmlns + 'Object')
    newReport_Body_Object3.set('cn','CN=Root,Vector=TaskList[Optimization],Problem=Optimization,Reference=Function Evaluations')

    newReport_Body_Object4 = etree.SubElement(newReport_Body, xmlns + 'Object')
    newReport_Body_Object4.set('cn','String=\nTime \= ')

    newReport_Body_Object5 = etree.SubElement(newReport_Body, xmlns + 'Object')
    newReport_Body_Object5.set('cn','CN=Root,Vector=TaskList[Optimization],Problem=Optimization,Timer=CPU Time')

    newReport_Body_Object6 = etree.SubElement(newReport_Body, xmlns + 'Object')
    newReport_Body_Object6.set('cn','String=\n')

    newReport_Body_Object7 = etree.SubElement(newReport_Body, xmlns + 'Object')
    newReport_Body_Object7.set('cn','CN=Root,Vector=TaskList[Optimization],Problem=Optimization,Reference=Best Value')
    
    
    
#Set the optimization task report to the report defined by report_key and return the report
def report(optTask,xmlns,report_key):
    report = optTask.find(xmlns + 'Report')
    
    #If no report has yet been set, report == None. Therefore, create new report
    if report == None:
        report = etree.Element(xmlns + 'Report')
        optTask.insert(0,report)
    
    report.set('reference', report_key)
    report.set('append', '1')
    
    return report
    
def updateOptimizationMethod(doc, xmlns, reportFileName):
    #Find the optimization task
    optTask = getOptimizationTask(doc,xmlns)

    #Find the report. Assume report structure hasn't changed since last run
    try:
        report = optTask.find(xmlns + 'Report')
        
        report.attrib['target'] = reportFileName
    except:
        print 'Error finding report'
        raise
        
    #Set the method to Current solution stats
    try:
        method = optTask.find(xmlns + 'Method')
        newMethod = etree.Element('Method', name='Current Solution Statistics', type='CurrentSolutionStatistics')
        optTask.replace(method,newMethod)
    except:
        print 'Error replacing Method'
        raise
        
def getParameterNames(fileName,xmlns, copasiPath, pid, strip=False):
    #names = [None] * (parameterRange[-1] + 1)
    #Load the copasi file
    try:
        doc = etree.parse(fileName)
    except:
        print 'Error loading copasi file'
        raise
 
    #Create new custom report for sensitivities task, containing results in footer
    try:
        report_key = 'auto_report_' + str(pid)
        listOfReports = doc.find(xmlns + 'ListOfReports')
        newReport = etree.SubElement(listOfReports, xmlns + 'Report')
        newReport.set('key', report_key)
        newReport.set('name', report_key)
        newReport.set('taskType', 'sensitivities')
        newReport.set('seperator', '&#x09;')
        newReport.set('precision', '6')
        
        newReport_Comment = etree.SubElement(newReport, xmlns + 'Comment')
        newReport_Comment_body = etree.SubElement(newReport_Comment, xmlns + 'body')
        newReport_Comment_body.set('xmlns', 'http://www.w3.org/1999/xhtml')
        newReport_Comment_body.text = 'Report automatically generated by condor-copasi'

        newReport_Footer = etree.SubElement(newReport, xmlns + 'Footer')

        newReport_Footer_Object = etree.SubElement(newReport_Footer, xmlns + 'Object')
        newReport_Footer_Object.set('cn','CN=Root,Vector=TaskList[Sensitivities],Object=Result')
        
        
    except Exception, e:
        print 'Error creating new report'
        raise
    
    #Next, get the task list and set the optimization task to non-executable if needs be
    optTask = getOptimizationTask(doc, xmlns)

    #Set the optimization task as scheduled to not run
    try:
        optTask.attrib['scheduled'] = 'false'
    except:
        raise 
    
    
    #Now, find the sensitivites task, set the appropriate settings (Evaluation/Concentration fluxes of reactions/All variables/executable)
    #Get the task list
    try:
        listOfTasks = doc.find(xmlns + 'ListOfTasks')
        assert listOfTasks != None
    except:
        print 'Error finding task list'
        print 'Ensure that input file is valid Copasi XML'
        raise
    try:
        for task in listOfTasks:
            if (task.attrib['type'] == 'sensitivities'):
                sensTask = task
                break
        
        assert sensTask != None
    except:
        print 'Sensitivity task not found...'
        raise
    
    #Set scheduled to run
    try:
        sensTask.attrib['scheduled'] = 'true'
    except:
        raise
     
    #Set the report
    try:
        report = sensTask.find(xmlns + 'Report')
        
        #If no report has yet been set, report == None. Therefore, create new report
        if report == None:
            report = etree.Element(xmlns + 'Report')
            optTask.insert(0,report)
        
        report.set('reference', report_key)
        report.set('append', '1')
        report.set('target', str(pid) + '_output.txt')
        
    except:
        print 'Error finding report'
        raise
    
    #Set the appropriate subtask
    try:
        problem = sensTask.find(xmlns + 'Problem')
    except:
        raise
        
    try:
        for parameter in problem:
            if parameter.get('name') == 'SubtaskType':
                parameter.set('value', '0')
            
            if parameter.get('name') == 'TargetFunctions':
                for subParameter in parameter:
                    if subParameter.get('name') == 'SingleObject':
                        subParameter.set('value', '')
                    if subParameter.get('name') == 'ObjectListType':
                        subParameter.set('value', '21')
            if parameter.get('name') == 'ListOfVariables':
                #Clear the list of variables
                parameter.clear()
                parameter.set('name', 'ListOfVariables')
                variables = etree.SubElement(parameter, xmlns + 'ParameterGroup')
                variables.set('name', 'Variables')
                
                #Add two new children to variables:
                #<Parameter name='SingleObject')
                singleObject = etree.SubElement(variables, xmlns + 'Parameter')
                singleObject.set('name', 'SingleObject')
                singleObject.set('type', 'cn')
                singleObject.set('value', '')
                
                #<Parameter name='ObjectListType'>
                objectListType = etree.SubElement(variables, xmlns + 'Parameter')
                objectListType.set('name', 'ObjectListType')
                objectListType.set('type', 'unsignedInteger')
                objectListType.set('value', '41')
#                parameterGroup = parameter[0]
#                for subParameter in parameterGroup:
#                    if subParameter.get('name') == 'SingleObject':
#                        subParameter.set('value','')
#                    if subParameter.get('name') == 'ObjectListType':
#                        subParameter.set('value', '41')
                
    except:
        raise
    
    try:
        #Save the new copasi xml file in a new location:
        copasiTempFile = str(pid) + '_temp_copasi.cps'
        doc.write(copasiTempFile)
        
        #And run CopasiSE on the new file
        p = subprocess.Popen(copasiPath + ' --nologo --home . ' + copasiTempFile,shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        process_output = p.communicate()[0]
        
        #Delete the temp copasi file
        os.remove(copasiTempFile)
    except:
        raise
    
    #Read through the sensitivity output file, and extract line 7:
    try:
        file = open(str(pid) + '_output.txt')
        iterator = 1
        for f in file.readlines():
            nameLine = f.rstrip('\n') #extract the 7th line
            if iterator == 7:
                break
            iterator += 1
        file.close()
    except:
        raise
    
    #Seperate each name from the line containing the names
    names = nameLine.split('\t')
    #And remove the first element, which is an empty string
    names.pop(0)
    
    #Finally, if strip==True, name is of the format Values[name].InitialValue. Extract the name:
    if strip:
        for nameIndex in range(len(names)):
            try:
                start = names[nameIndex].index('[') + 1
                end = names[nameIndex].rindex(']')            
                names[nameIndex] = str(names[nameIndex][start:end])
            except:
                pass
        
    #Remove the temp output file
    os.remove(str(pid) + '_output.txt')
    
    return names
    
def generateCurrentSolutions(parameterRange,xmlns,pid,copasiPath):
    #New step: open each temp xml file, change optimization method to 'Current Solution Statistics',
    #create another report file, and record the output of the current solution.
    #In theory, if the optimisation was successful, the current solution should be ~= the optimized value
    #However, if a numerical error has occured, then the two values will probably be different
    pmin = []
    pmax = []

    for i in parameterRange:
        minFileName = Template('auto_copasi_xml_${pid}_min_$index.cps').substitute(index=i, pid=pid)
        maxFileName = Template('auto_copasi_xml_${pid}_max_$index.cps').substitute(index=i, pid=pid)
        
        minDoc = etree.parse(minFileName)
        maxDoc = etree.parse(maxFileName)
        
        minReportLocation = Template('${pid}_min_${index}_cs.txt').substitute(index=i, pid=pid)
        maxReportLocation = Template('${pid}_max_${index}_cs.txt').substitute(index=i, pid=pid)
        
        updateOptimizationMethod(minDoc,xmlns,minReportLocation)
        updateOptimizationMethod(maxDoc,xmlns,maxReportLocation)
        
        try:
            minDoc.write(minFileName)
            maxDoc.write(maxFileName)
        except:
            print 'Error writing to xml file'
            raise
            
            
        #Run CopasiSE on each of the files with niceness 15
        pmin.append(subprocess.Popen('nice -n 15 ' + copasiPath + ' --nologo --home . ' + minFileName,shell=True, stdout=subprocess.PIPE))
        pmax.append(subprocess.Popen('nice -n 15 ' + copasiPath + ' --nologo --home . ' + maxFileName,shell=True, stdout=subprocess.PIPE))
        
    #Poll to see if the processes have finished
    #If not, wait one second, try again
    finished = False
    while not finished:
        finished = True
        for i in range(len(pmin)):
            if (pmin[i].poll() == None):
                time.sleep(1)
                finished = False
                
            if (pmax[i].poll() == None):
                time.sleep(1)
                finished = False


def readOutputFiles(parameterRange,pid):
    #Read through output files
    #Create 3d array for mins and maxs
    mins = [[None for r in range(5)] for r in parameterRange]
    maxs = [[None for r in range(5)] for r in parameterRange]

    iterator = 0
    for i in parameterRange:
        
        #Read min files
        iterator = 0
        try:
            file = open(Template('${pid}_min_$index.txt').substitute(index=i, pid=pid),'r')
            
            for f in file.readlines():
                value = f.rstrip('\n') #Read the file line by line
                index=parameterRange.index(i)
                mins[index][iterator] = value
                iterator = (iterator + 1)%4
            file.close()
    #        os.remove(Template('${pid}_min_$index.txt').substitute(index=i, pid=pid))

        except:
            #print 'Error reading or removing output file ' + str(i) + 'min'
            pass
        #Read max files
        
        iterator = 0
        try:
            file = open(Template('${pid}_max_$index.txt').substitute(index=i, pid=pid),'r')
            for f in file.readlines():
                value = f.rstrip('\n') #Read the file line by line
                index=parameterRange.index(i)
                maxs[index][iterator] = value
                iterator = (iterator + 1)%4
            file.close()
            os.remove(Template('${pid}_max_$index.txt').substitute(index=i, pid=pid))
        except:
            #print "Error reading or removing output file " + str(i) + 'max'
            pass
        
        
        #Read Current Solution min files    
        try:
            file = open(Template('${pid}_min_${index}_cs.txt').substitute(index=i, pid=pid),'r')
            
            for f in file.readlines():
                value = f.rstrip('\n') #extract the last line in the file
            file.close()
            os.remove(Template('${pid}_min_${index}_cs.txt').substitute(index=i, pid=pid))
            mins[index][4] = value
        except:
            #print 'Error reading or removing temorary output file ' + str(i) + 'min'
            pass
            
        #Read current solution max files
        try:
            file = open(Template('${pid}_max_${index}_cs.txt').substitute(index=i, pid=pid),'r')
            for f in file.readlines():
                value = f.rstrip('\n') #extract the last line in the file
            file.close()
            os.remove(Template('${pid}_max_${index}_cs.txt').substitute(index=i, pid=pid))
            maxs[index][4] = value
        except:
            #print "Error reading or removing temporary output file " + str(i) + 'max'
            pass
    return [mins,maxs]
    
def printOutput(parameterRange,names,mins,maxs):
    print 'Parameter\tName\tMin\tMax\tEvaluations min\tCPU time min\tEvaluations max\tCPU time max\tMin Validation\tMax validation'
    for index in parameterRange:
        i = parameterRange.index(index)
        try:
            assert names[i] != None
            sys.stdout.write(str(index) + '\t' + names[index])
        except:
            sys.stdout.write(str(index) + '\t?')
        try:
             sys.stdout.write('\t' + str(mins[i][3]))
        except:
             sys.stdout.write('\t?')
        try:
            sys.stdout.write('\t' + str(maxs[i][3]))
        except:
            sys.stdout.write('\t?')
        try:
            sys.stdout.write('\t' + str(mins[i][1]).split(' ')[2])
        except:
            sys.stdout.write('\t?')
        try:
            sys.stdout.write('\t' + str(mins[i][2]).split(' ')[2])
        except:
            sys.stdout.write('\t?')
        try:
            sys.stdout.write('\t' + str(maxs[i][1].split(' ')[2]))
        except:
            sys.stdout.write('\t?')
        try:
            sys.stdout.write('\t' + str(maxs[i][2]).split(' ')[2])
        except:
            sys.stdout.write('\t?')
        try:
             sys.stdout.write('\t' + str(mins[i][4]))
        except:
             sys.stdout.write('\t?')
        try:
             sys.stdout.write('\t' + str(maxs[i][4]) + '\n')
        except:
             sys.stdout.write('\t?\n')
